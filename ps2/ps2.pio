

.program ps2_input

    wait 1 pin 1    ; wait for clock to go high
    wait 0 pin 1    ; wait for it to go low
    in pins, 1      ; sample data pin
    
.wrap 

% c-sdk {
static inline void ps2_input_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = ps2_input_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, pin);
    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);
    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);

    // PS/2 is lsb first, so shift right
    sm_config_set_in_shift(
        &c,
        true, // Shift-to-right = true
        true,  // Autopush enabled
        11      // Autopush threshold = 11 (start + 8 bits data + parity + stop)
    );

    // We only receive, so disable the TX FIFO to make the RX FIFO deeper.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}